{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This example demonstrates the whole process from initial atomic structure to training, evaluation and prediction. It includes:\n",
    "\n",
    "1. Read input atomic structures (saved as extxyz files) and create descriptors and their derivatives.\n",
    "\n",
    "2. Read inputs and outputs into a Data object.\n",
    "\n",
    "3. Create tensorflow dataset for training.\n",
    "\n",
    "4. Train the potential and apply it for prediction.\n",
    "\n",
    "5. Save the trained model and then load it for retraining or prediction.\n",
    "\n",
    "\n",
    "The code has been tested on Tensorflow 2.5 and 2.6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import atomdnn\n",
    "\n",
    "# 'float64' is used for reading data and train by default\n",
    "atomdnn.data_type = 'float64'\n",
    "\n",
    "# force and stress are evaluated by default, \n",
    "# if one only need to compute potential energy, then set compute_force to false\n",
    "atomdnn.compute_force = True\n",
    "\n",
    "# default value is for converting ev/A^3 to GPa\n",
    "# note that: the predicted positive stress means tension and negative stress means compression\n",
    "stress_unit_convert = 160.2176 \n",
    "\n",
    "import numpy as np\n",
    "import pickle\n",
    "import tensorflow as tf\n",
    "from atomdnn import data\n",
    "from atomdnn.data import Data\n",
    "from atomdnn.data import *\n",
    "from atomdnn.io import *\n",
    "from atomdnn import network\n",
    "from atomdnn.network import Network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create descriptors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Read input atomic structures (saved as extxyz files) and create descriptors and their derivatives**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "descriptor = {'name': 'acsf', \n",
    "              'cutoff': 6.5,\n",
    "              'etaG2':[0.01,0.05,0.1,0.5,1,5,10], \n",
    "              'etaG4': [0.01], \n",
    "              'zeta': [0.08,0.2,1.0,5.0,10.0,50.0,100.0],\n",
    "              'lambda': [1.0, -1.0]}\n",
    "\n",
    "# define lammps excutable (serial or mpi) \n",
    "# LAMMPS has to be compiled with the added compute and dump_local subrutines (inside atomdnn/lammps)\n",
    "lmpexe = 'lmp_serial' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start creating fingerprints ...\n",
      "  so far finished for 10 images ...\n",
      "  so far finished for 20 images ...\n",
      "  so far finished for 30 images ...\n",
      "  so far finished for 40 images ...\n",
      "  so far finished for 50 images ...\n",
      "Finish creating descriptors and their derivatives from total 50 images.\n",
      "It took 5.02 seconds.\n"
     ]
    }
   ],
   "source": [
    "xyzfile_path = './extxyz' \n",
    "xyzfile_name = 'example_extxyz.*' # a serials of files like example_extxyz.1, example_extxyz.2, ...example_extxyz.n\n",
    "descriptors_path = './descriptors'\n",
    "descriptor_filename = 'dump_fp' # a serials of dump_fp.* files will be created\n",
    "der_filename ='dump_der'\n",
    "\n",
    "# this will create a serials of files for descriptors and their derivatives inside descriptors_path\n",
    "# by default, descriptor files are saved as 'dump_fp.*' and derivatives are saved as 'dump_der.*'\n",
    "create_descriptors(xyzfile_path = xyzfile_path, \\\n",
    "                   xyzfile_name = xyzfile_name, \\\n",
    "                   lmpexe = lmpexe, \\\n",
    "                   descriptors_path = descriptors_path, \\\n",
    "                   descriptor = descriptor, \\\n",
    "                   descriptor_filename = descriptor_filename, \\\n",
    "                   der_filename = der_filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read inputs&outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Read inputs and outputs into a Data object** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Reading fingerprints data from LAMMPS dump files ./descriptors/dump_fp.i\n",
      "  so far read 50 images ...\n",
      "  Finish reading fingerprints from total 50 images.\n",
      "\n",
      "  image number = 50\n",
      "  max number of atom = 4\n",
      "  number of fingerprints = 22\n",
      "  type of atoms = 1\n",
      "\n",
      "Reading derivative data from a series of files ./descriptors/dump_der.i\n",
      "This may take a while for large data set ...\n",
      "  so far read 50 images ...\n",
      "  Finish reading dGdr derivatives from total 50 images.\n",
      "\n",
      "  Pad zeros to derivatives data if needed ...\n",
      "  Pading finished: 48 images derivatives have been padded with zeros.\n",
      "\n",
      "  image number = 50\n",
      "  max number of derivative pairs = 200\n",
      "  number of fingerprints = 22\n",
      "\n",
      "  It took 0.90 seconds to read the derivatives data.\n"
     ]
    }
   ],
   "source": [
    "# create a Data object\n",
    "grdata = Data()\n",
    "\n",
    "# read inputs: descriptors and their derivatives\n",
    "fp_filename = descriptors_path + '/dump_fp.*'\n",
    "der_filename = descriptors_path + '/dump_der.*'\n",
    "\n",
    "grdata.read_inputdata(fp_filename = fp_filename,der_filename = der_filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading outputs from extxyz files ...\n",
      "  so far read 50 images ...\n",
      "  Finish reading outputs from total 50 images.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# read outputs: potential energy, force and stress from extxyz files\n",
    "grdata.read_outputdata(xyzfile_path=xyzfile_path, xyzfile_name=xyzfile_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create TFdataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create tensorflow dataset for training**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Conversion may take a while for large datasets...\n",
      "It took 0.2547 second.\n"
     ]
    }
   ],
   "source": [
    "# convert data to tensors\n",
    "grdata.convert_data_to_tensor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create tensorflow dataset\n",
    "tf_dataset = tf.data.Dataset.from_tensor_slices((grdata.input_dict,grdata.output_dict))\n",
    "\n",
    "dataset_path = './example_tfdataset'\n",
    "\n",
    "# save the dataset\n",
    "tf.data.experimental.save(tf_dataset, dataset_path)\n",
    "\n",
    "# save the element_spec to disk for future loading, this is only needed for tensorflow lower than 2.6\n",
    "with open(dataset_path + '/element_spec', 'wb') as out_: \n",
    "    pickle.dump(tf_dataset.element_spec, out_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note: The above three steps just need to be done once for one data set, the training only uses the saved tensorflow dataset.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Load the dataset and train the model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load tensorflow dataset, for Tensorflow version lower than 2.6, need to specify element_spec.\n",
    "\n",
    "with open(dataset_path + '/element_spec', 'rb') as in_:\n",
    "    element_spec = pickle.load(in_)\n",
    "\n",
    "dataset = tf.data.experimental.load(dataset_path,element_spec=element_spec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Traning data: 35 images\n",
      "Validation data: 10 images\n",
      "Test data: 5 images\n"
     ]
    }
   ],
   "source": [
    "# split the data to training, validation and testing sets\n",
    "\n",
    "train_dataset, val_dataset, test_dataset = split_dataset(dataset,0.7,0.2,0.1,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build the network\n",
    "# See section 'Training' for detailed description on Network object.\n",
    "\n",
    "elements = ['C']\n",
    "act_fun = 'relu' # activation function\n",
    "nfp = get_fingerprints_num(dataset) # number of fingerprints (or descriptors)\n",
    "arch = [10,10] # NN layers\n",
    "\n",
    "model = Network(elements = elements,\\\n",
    "                num_fingerprints = nfp,\\\n",
    "                arch = arch,\\\n",
    "                activation_function = act_fun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Forces are used for training.\n",
      "Stresses are used for training.\n",
      "Scaling factors are computed using training dataset.\n",
      "Training dataset are standardized.\n",
      "Validation dataset are standardized.\n",
      "Training dataset will be shuffled during training.\n",
      "\n",
      "===> Epoch 1/50 - 0.242s/epoch\n",
      "     training_loss    - pe_loss: 63.060 - force_loss: 340.074 - stress_loss: 7355.740 - total_loss: 1138.708\n",
      "     validation_loss  - pe_loss: 47.981 - force_loss: 340.109 - stress_loss: 11641.806 - total_loss: 1552.271\n",
      "\n",
      "===> Epoch 2/50 - 0.202s/epoch\n",
      "     training_loss    - pe_loss: 41.839 - force_loss: 338.547 - stress_loss: 6488.671 - total_loss: 1029.253\n",
      "     validation_loss  - pe_loss: 37.360 - force_loss: 302.898 - stress_loss: 11096.109 - total_loss: 1449.869\n",
      "\n",
      "===> Epoch 3/50 - 0.229s/epoch\n",
      "     training_loss    - pe_loss: 30.148 - force_loss: 295.398 - stress_loss: 6031.364 - total_loss: 928.682\n",
      "     validation_loss  - pe_loss: 27.729 - force_loss: 257.073 - stress_loss: 6611.963 - total_loss: 945.998\n",
      "\n",
      "===> Epoch 4/50 - 0.221s/epoch\n",
      "     training_loss    - pe_loss: 25.499 - force_loss: 264.563 - stress_loss: 5426.328 - total_loss: 832.694\n",
      "     validation_loss  - pe_loss: 21.732 - force_loss: 222.970 - stress_loss: 4001.949 - total_loss: 644.896\n",
      "\n",
      "===> Epoch 5/50 - 0.223s/epoch\n",
      "     training_loss    - pe_loss: 19.913 - force_loss: 256.813 - stress_loss: 4623.454 - total_loss: 739.071\n",
      "     validation_loss  - pe_loss: 18.560 - force_loss: 204.918 - stress_loss: 3570.819 - total_loss: 580.560\n",
      "\n",
      "===> Epoch 6/50 - 0.216s/epoch\n",
      "     training_loss    - pe_loss: 20.351 - force_loss: 214.047 - stress_loss: 4919.543 - total_loss: 726.352\n",
      "     validation_loss  - pe_loss: 16.724 - force_loss: 187.974 - stress_loss: 2774.870 - total_loss: 482.185\n",
      "\n",
      "===> Epoch 7/50 - 0.228s/epoch\n",
      "     training_loss    - pe_loss: 16.538 - force_loss: 212.149 - stress_loss: 4363.531 - total_loss: 665.040\n",
      "     validation_loss  - pe_loss: 14.973 - force_loss: 169.384 - stress_loss: 2824.495 - total_loss: 466.807\n",
      "\n",
      "===> Epoch 8/50 - 0.204s/epoch\n",
      "     training_loss    - pe_loss: 11.135 - force_loss: 173.746 - stress_loss: 3679.028 - total_loss: 552.783\n",
      "     validation_loss  - pe_loss: 14.269 - force_loss: 155.110 - stress_loss: 2688.537 - total_loss: 438.233\n",
      "\n",
      "===> Epoch 9/50 - 0.217s/epoch\n",
      "     training_loss    - pe_loss: 13.449 - force_loss: 152.360 - stress_loss: 3108.144 - total_loss: 476.624\n",
      "     validation_loss  - pe_loss: 14.968 - force_loss: 141.976 - stress_loss: 3357.161 - total_loss: 492.661\n",
      "\n",
      "===> Epoch 10/50 - 0.205s/epoch\n",
      "     training_loss    - pe_loss: 17.161 - force_loss: 144.477 - stress_loss: 3740.302 - total_loss: 535.668\n",
      "     validation_loss  - pe_loss: 16.087 - force_loss: 129.152 - stress_loss: 3363.140 - total_loss: 481.553\n",
      "\n",
      "===> Epoch 11/50 - 0.211s/epoch\n",
      "     training_loss    - pe_loss: 17.185 - force_loss: 121.094 - stress_loss: 3050.336 - total_loss: 443.312\n",
      "     validation_loss  - pe_loss: 17.087 - force_loss: 113.933 - stress_loss: 2551.663 - total_loss: 386.186\n",
      "\n",
      "===> Epoch 12/50 - 0.224s/epoch\n",
      "     training_loss    - pe_loss: 16.637 - force_loss: 109.219 - stress_loss: 2370.110 - total_loss: 362.866\n",
      "     validation_loss  - pe_loss: 17.689 - force_loss: 97.074 - stress_loss: 2602.237 - total_loss: 374.987\n",
      "\n",
      "===> Epoch 13/50 - 0.217s/epoch\n",
      "     training_loss    - pe_loss: 16.613 - force_loss: 105.366 - stress_loss: 2287.128 - total_loss: 350.692\n",
      "     validation_loss  - pe_loss: 17.418 - force_loss: 91.997 - stress_loss: 2337.202 - total_loss: 343.135\n",
      "\n",
      "===> Epoch 14/50 - 0.215s/epoch\n",
      "     training_loss    - pe_loss: 19.297 - force_loss: 87.292 - stress_loss: 1404.290 - total_loss: 247.018\n",
      "     validation_loss  - pe_loss: 16.794 - force_loss: 88.163 - stress_loss: 2260.646 - total_loss: 331.022\n",
      "\n",
      "===> Epoch 15/50 - 0.190s/epoch\n",
      "     training_loss    - pe_loss: 16.452 - force_loss: 93.070 - stress_loss: 1363.711 - total_loss: 245.893\n",
      "     validation_loss  - pe_loss: 16.137 - force_loss: 82.981 - stress_loss: 2126.521 - total_loss: 311.770\n",
      "\n",
      "===> Epoch 16/50 - 0.193s/epoch\n",
      "     training_loss    - pe_loss: 16.693 - force_loss: 79.436 - stress_loss: 1505.886 - total_loss: 246.717\n",
      "     validation_loss  - pe_loss: 15.632 - force_loss: 78.440 - stress_loss: 1899.606 - total_loss: 284.033\n",
      "\n",
      "===> Epoch 17/50 - 0.203s/epoch\n",
      "     training_loss    - pe_loss: 16.359 - force_loss: 84.692 - stress_loss: 1567.637 - total_loss: 257.815\n",
      "     validation_loss  - pe_loss: 15.098 - force_loss: 72.142 - stress_loss: 1882.750 - total_loss: 275.515\n",
      "\n",
      "===> Epoch 18/50 - 0.247s/epoch\n",
      "     training_loss    - pe_loss: 17.538 - force_loss: 70.511 - stress_loss: 1223.243 - total_loss: 210.374\n",
      "     validation_loss  - pe_loss: 14.630 - force_loss: 67.023 - stress_loss: 2512.499 - total_loss: 332.903\n",
      "\n",
      "===> Epoch 19/50 - 0.191s/epoch\n",
      "     training_loss    - pe_loss: 14.991 - force_loss: 68.985 - stress_loss: 1350.129 - total_loss: 218.989\n",
      "     validation_loss  - pe_loss: 14.003 - force_loss: 63.077 - stress_loss: 2543.449 - total_loss: 331.425\n",
      "\n",
      "===> Epoch 20/50 - 0.200s/epoch\n",
      "     training_loss    - pe_loss: 15.257 - force_loss: 59.828 - stress_loss: 1157.593 - total_loss: 190.844\n",
      "     validation_loss  - pe_loss: 13.590 - force_loss: 59.145 - stress_loss: 2209.569 - total_loss: 293.691\n",
      "\n",
      "===> Epoch 21/50 - 0.228s/epoch\n",
      "     training_loss    - pe_loss: 13.402 - force_loss: 67.119 - stress_loss: 1015.503 - total_loss: 182.071\n",
      "     validation_loss  - pe_loss: 13.357 - force_loss: 53.518 - stress_loss: 1958.299 - total_loss: 262.704\n",
      "\n",
      "===> Epoch 22/50 - 0.193s/epoch\n",
      "     training_loss    - pe_loss: 13.518 - force_loss: 56.822 - stress_loss: 839.241 - total_loss: 154.264\n",
      "     validation_loss  - pe_loss: 13.425 - force_loss: 48.992 - stress_loss: 1616.169 - total_loss: 224.034\n",
      "\n",
      "===> Epoch 23/50 - 0.253s/epoch\n",
      "     training_loss    - pe_loss: 13.768 - force_loss: 56.009 - stress_loss: 877.928 - total_loss: 157.570\n",
      "     validation_loss  - pe_loss: 13.435 - force_loss: 48.059 - stress_loss: 1219.728 - total_loss: 183.467\n",
      "\n",
      "===> Epoch 24/50 - 0.231s/epoch\n",
      "     training_loss    - pe_loss: 13.434 - force_loss: 58.265 - stress_loss: 1123.461 - total_loss: 184.045\n",
      "     validation_loss  - pe_loss: 13.149 - force_loss: 42.599 - stress_loss: 1004.809 - total_loss: 156.228\n",
      "\n",
      "===> Epoch 25/50 - 0.207s/epoch\n",
      "     training_loss    - pe_loss: 11.494 - force_loss: 49.842 - stress_loss: 948.868 - total_loss: 156.223\n",
      "     validation_loss  - pe_loss: 13.072 - force_loss: 36.523 - stress_loss: 985.632 - total_loss: 148.158\n",
      "\n",
      "===> Epoch 26/50 - 0.217s/epoch\n",
      "     training_loss    - pe_loss: 13.035 - force_loss: 46.092 - stress_loss: 821.157 - total_loss: 141.243\n",
      "     validation_loss  - pe_loss: 13.018 - force_loss: 34.420 - stress_loss: 879.450 - total_loss: 135.384\n",
      "\n",
      "===> Epoch 27/50 - 0.199s/epoch\n",
      "     training_loss    - pe_loss: 14.402 - force_loss: 39.259 - stress_loss: 422.067 - total_loss: 95.868\n",
      "     validation_loss  - pe_loss: 12.979 - force_loss: 32.963 - stress_loss: 743.509 - total_loss: 120.293\n",
      "\n",
      "===> Epoch 28/50 - 0.207s/epoch\n",
      "     training_loss    - pe_loss: 13.238 - force_loss: 41.517 - stress_loss: 430.548 - total_loss: 97.810\n",
      "     validation_loss  - pe_loss: 12.728 - force_loss: 29.243 - stress_loss: 581.828 - total_loss: 100.154\n",
      "\n",
      "===> Epoch 29/50 - 0.205s/epoch\n",
      "     training_loss    - pe_loss: 12.872 - force_loss: 36.499 - stress_loss: 506.248 - total_loss: 99.996\n",
      "     validation_loss  - pe_loss: 12.348 - force_loss: 27.912 - stress_loss: 696.936 - total_loss: 109.954\n",
      "\n",
      "===> Epoch 30/50 - 0.232s/epoch\n",
      "     training_loss    - pe_loss: 12.664 - force_loss: 44.302 - stress_loss: 485.721 - total_loss: 105.538\n",
      "     validation_loss  - pe_loss: 12.160 - force_loss: 28.085 - stress_loss: 690.873 - total_loss: 109.333\n",
      "\n",
      "===> Epoch 31/50 - 0.224s/epoch\n",
      "     training_loss    - pe_loss: 12.688 - force_loss: 35.669 - stress_loss: 385.926 - total_loss: 86.950\n",
      "     validation_loss  - pe_loss: 12.399 - force_loss: 26.697 - stress_loss: 563.213 - total_loss: 95.418\n",
      "\n",
      "===> Epoch 32/50 - 0.210s/epoch\n",
      "     training_loss    - pe_loss: 12.791 - force_loss: 30.050 - stress_loss: 371.575 - total_loss: 79.998\n",
      "     validation_loss  - pe_loss: 12.590 - force_loss: 26.551 - stress_loss: 511.294 - total_loss: 90.270\n",
      "\n",
      "===> Epoch 33/50 - 0.238s/epoch\n",
      "     training_loss    - pe_loss: 13.013 - force_loss: 33.084 - stress_loss: 518.474 - total_loss: 97.944\n",
      "     validation_loss  - pe_loss: 12.531 - force_loss: 26.636 - stress_loss: 437.782 - total_loss: 82.945\n",
      "\n",
      "===> Epoch 34/50 - 0.175s/epoch\n",
      "     training_loss    - pe_loss: 12.870 - force_loss: 27.200 - stress_loss: 465.778 - total_loss: 86.648\n",
      "     validation_loss  - pe_loss: 12.371 - force_loss: 26.732 - stress_loss: 472.396 - total_loss: 86.342\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===> Epoch 35/50 - 0.230s/epoch\n",
      "     training_loss    - pe_loss: 13.072 - force_loss: 28.979 - stress_loss: 457.129 - total_loss: 87.764\n",
      "     validation_loss  - pe_loss: 12.162 - force_loss: 27.584 - stress_loss: 405.666 - total_loss: 80.313\n",
      "\n",
      "===> Epoch 36/50 - 0.177s/epoch\n",
      "     training_loss    - pe_loss: 12.871 - force_loss: 28.323 - stress_loss: 359.149 - total_loss: 77.109\n",
      "     validation_loss  - pe_loss: 11.897 - force_loss: 25.966 - stress_loss: 308.571 - total_loss: 68.720\n",
      "\n",
      "===> Epoch 37/50 - 0.216s/epoch\n",
      "     training_loss    - pe_loss: 12.214 - force_loss: 30.554 - stress_loss: 343.573 - total_loss: 77.126\n",
      "     validation_loss  - pe_loss: 11.583 - force_loss: 27.246 - stress_loss: 341.293 - total_loss: 72.958\n",
      "\n",
      "===> Epoch 38/50 - 0.205s/epoch\n",
      "     training_loss    - pe_loss: 11.326 - force_loss: 27.573 - stress_loss: 374.659 - total_loss: 76.365\n",
      "     validation_loss  - pe_loss: 10.775 - force_loss: 27.324 - stress_loss: 264.535 - total_loss: 64.553\n",
      "\n",
      "===> Epoch 39/50 - 0.225s/epoch\n",
      "     training_loss    - pe_loss: 10.716 - force_loss: 25.122 - stress_loss: 391.479 - total_loss: 74.985\n",
      "     validation_loss  - pe_loss: 9.601 - force_loss: 25.424 - stress_loss: 377.649 - total_loss: 72.790\n",
      "\n",
      "===> Epoch 40/50 - 0.196s/epoch\n",
      "     training_loss    - pe_loss: 9.577 - force_loss: 25.639 - stress_loss: 416.391 - total_loss: 76.855\n",
      "     validation_loss  - pe_loss: 8.494 - force_loss: 26.807 - stress_loss: 416.565 - total_loss: 76.958\n",
      "\n",
      "===> Epoch 41/50 - 0.198s/epoch\n",
      "     training_loss    - pe_loss: 8.368 - force_loss: 23.657 - stress_loss: 287.868 - total_loss: 60.812\n",
      "     validation_loss  - pe_loss: 7.708 - force_loss: 26.754 - stress_loss: 422.066 - total_loss: 76.668\n",
      "\n",
      "===> Epoch 42/50 - 0.230s/epoch\n",
      "     training_loss    - pe_loss: 8.452 - force_loss: 24.731 - stress_loss: 315.003 - total_loss: 64.683\n",
      "     validation_loss  - pe_loss: 7.105 - force_loss: 28.294 - stress_loss: 299.194 - total_loss: 65.318\n",
      "\n",
      "===> Epoch 43/50 - 0.229s/epoch\n",
      "     training_loss    - pe_loss: 8.083 - force_loss: 24.970 - stress_loss: 254.668 - total_loss: 58.519\n",
      "     validation_loss  - pe_loss: 6.269 - force_loss: 28.521 - stress_loss: 253.969 - total_loss: 60.187\n",
      "\n",
      "===> Epoch 44/50 - 0.183s/epoch\n",
      "     training_loss    - pe_loss: 6.112 - force_loss: 23.348 - stress_loss: 235.360 - total_loss: 52.995\n",
      "     validation_loss  - pe_loss: 5.358 - force_loss: 29.082 - stress_loss: 208.927 - total_loss: 55.332\n",
      "\n",
      "===> Epoch 45/50 - 0.226s/epoch\n",
      "     training_loss    - pe_loss: 6.441 - force_loss: 26.129 - stress_loss: 156.721 - total_loss: 48.242\n",
      "     validation_loss  - pe_loss: 4.450 - force_loss: 28.374 - stress_loss: 186.346 - total_loss: 51.459\n",
      "\n",
      "===> Epoch 46/50 - 0.221s/epoch\n",
      "     training_loss    - pe_loss: 4.000 - force_loss: 23.461 - stress_loss: 151.348 - total_loss: 42.597\n",
      "     validation_loss  - pe_loss: 3.738 - force_loss: 27.473 - stress_loss: 168.654 - total_loss: 48.076\n",
      "\n",
      "===> Epoch 47/50 - 0.185s/epoch\n",
      "     training_loss    - pe_loss: 4.507 - force_loss: 23.344 - stress_loss: 174.907 - total_loss: 45.341\n",
      "     validation_loss  - pe_loss: 3.287 - force_loss: 27.115 - stress_loss: 141.923 - total_loss: 44.594\n",
      "\n",
      "===> Epoch 48/50 - 0.183s/epoch\n",
      "     training_loss    - pe_loss: 3.173 - force_loss: 24.408 - stress_loss: 139.998 - total_loss: 41.581\n",
      "     validation_loss  - pe_loss: 2.883 - force_loss: 26.482 - stress_loss: 162.336 - total_loss: 45.598\n",
      "\n",
      "===> Epoch 49/50 - 0.231s/epoch\n",
      "     training_loss    - pe_loss: 3.309 - force_loss: 21.386 - stress_loss: 93.648 - total_loss: 34.059\n",
      "     validation_loss  - pe_loss: 2.527 - force_loss: 24.680 - stress_loss: 203.034 - total_loss: 47.511\n",
      "\n",
      "===> Epoch 50/50 - 0.209s/epoch\n",
      "     training_loss    - pe_loss: 2.896 - force_loss: 23.390 - stress_loss: 137.304 - total_loss: 40.017\n",
      "     validation_loss  - pe_loss: 2.308 - force_loss: 23.773 - stress_loss: 195.185 - total_loss: 45.600\n",
      "\n",
      "End of training, elapsed time:  00:00:10\n"
     ]
    }
   ],
   "source": [
    "# Train the model \n",
    "\n",
    "opt = 'Adam' # optimizer\n",
    "loss_fun = 'mae' # loss function\n",
    "scaling = 'std' # scaling the traning data with standardization\n",
    "lr = 0.02 # learning rate\n",
    "loss_weights = {'pe' : 1, 'force' : 1, 'stress': 0.1} # the weights in loss function\n",
    "\n",
    "model.train(train_dataset, val_dataset, \\\n",
    "            optimizer=opt, \\\n",
    "            loss_fun = loss_fun, \\\n",
    "            batch_size=30, \\\n",
    "            lr=lr, \\\n",
    "            epochs=50, \\\n",
    "            scaling=scaling, \\\n",
    "            loss_weights=loss_weights, \\\n",
    "            compute_all_loss=True, \\\n",
    "            shuffle=True, \\\n",
    "            append_loss=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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3333HUuWLGHcuHHExcWRlJTE4sWLadWqFRdccAEJCQnMnTuXu+66i8zMTG677bb9Xuvhhx/mpJNO4j//+Q+//PILt912G40aNWLEiBEHFfvnn3/OwIEDGTx4MOPHj+eXX35h1KhRbN68mWeffRaA4cOH8/333/Poo49Sp04dVq1axbfffltYx+DBg8nMzOT555+nevXqLF26lIULFx5UPIfMOaftELeOHTu6slT3prpu1eZVZXpNEam45s+fH+oQAuLcc8913bp122tft27dXNWqVd1ff/21z/Py8/NdTk6Ou/fee12TJk0K93/99dcOcL/++mvhPsAdf/zxe51/1llnuU6dOpU4zkaNGrkbb7yx8H2nTp1c9+7d9yozbtw4FxER4Vat8v6tP/zww90TTzyxzzqrVavmPvzwwxLH4Nyh/XcHZrp9fCfqUUg5lJqQyoYdwZkxTUSkounYsSO1a9fea9/u3bu56667aN68OTExMURHR3PHHXewbNmyvR5BFOfUU0/d633btm1ZvXr1QcWWl5fH7Nmz6d+//177Bw4cSH5+Pj/88AMA7du3Z/z48Tz99NMsXrz4b/W0b9+e2267jYkTJ7Jy5cqDiiVQlFiUQ0osRKQsmIVuC6SiSQXALbfcwkMPPcTll1/Op59+ys8//8zIkSMBL+nYn+rVq+/1vkqVKgc8Z182bdpETk7O32IseL9lyxYAJkyYwNlnn83YsWNp1aoVLVq04M033ywsP2nSJNLS0vjXv/5Fo0aNaN++PV9+GZoVspVYlEOpials2K7EQkSCy7nQbYFU3CyTb7/9Ntdeey0jRoygR48epKWlERVV9t0Oa9WqRXR09N/W7Vi/fj0ANWp4q1tXr16dJ554gr/++ot58+bRqVMnLrjgAubPnw9AvXr1mDhxIps3b+aHH36gTp069OnTh82bN5ftB0KJRbmkFgsRkb8rTctBZmYmMTF7OsDn5eXt1QJQViIjI+nYsSNvv/32XvvfeustIiIi6NKly9/OOfLIIxk/fjz5+fl/66AZERFB586dueuuu9i1axcrVqwIavzF0aiQcqh2Ym3Wb18f6jBERMJK69at+eCDD3j//fepX78+devW3WfZU045haeeeormzZtTo0YNnnrqqUMeMnqwxowZQ8+ePbnkkksYNGgQv/76K6NGjeKyyy6jfv36ABx33HGcc845HHHEEZgZL7zwAtWqVePYY49l27Zt9OzZk8GDB9OyZUuysrJ4+OGHqVOnDm3atCnzz6PEohxKTUjl97W/hzoMEZGwcvXVVzNnzhyGDh1Keno6d9111z7LPvnkk1x55ZUMGzaM2NhYLr74Ys455xwuv/zyMozYc+qpp/Lmm29yzz338Nprr5GamsqNN97ImDFjCst06dKFiRMnsnz5ciIjIzn66KOZMmUK9evXJysri3bt2vH444+zatUq4uLi6Ny5M59//nlIJvcyF+iHWZVQWlqamzlzZpld79NfP+XJr55kyvVTyuyaIlJxLViwICR/2UpoHcp/dzOb5ZxLK+6Y+liUQ6kJ6rwpIiLhSY9CyiF13hQRCU95eXns60mAmREZGVnGEZU9tViUQykJKWzYsWGfv7wiIhIazZo1Izo6utitsqySqhaLcii2SiwxUTFsz9xOUlxSqMMRERGfjz76aJ+jS/yHt1ZkSizKqYLHIUosRETCR7t27UIdQsjpUUg5lZqofhYiIhJ+lFiUUxoZIiIi4UiJRTml2TdFRCQclXliYWbNzew5M/vFzPLMbFoxZczMbjezVWaWaWbfmln7Ysq1NbMvzWyXma01s7FmFhmsusKJhpyKiEg4CkWLxeFAb2AR8PdF5T23AqOAccCZQAYw1czqFBQws2RgKuCAs4CxwI3AmCDWFTaUWIiISDgKRWLxkXOugXOuP/C3BS/MrCpeMnC/c26Cc24q0B/vS/8av6JXArFAX+fcF865Z/ESgeFmlhjousKNlk4XEZFwVOaJhXMu/wBFugKJwFt+5+wEPgJO8yt3GvCZc26737438RKEbkGoK6yoxUJEJPBGjx5NrVq1Sly+e/fu9OvXL4gRlT/h2HmzNZAH/FFk/wLfMf9yey1E75xbCezyKxfIusKKEgsREQlH4ZhYJAMZzrm8IvvTgTgzq+JXbmsx56f7jgW6rr2Y2eVmNtPMZm7cuHE/Hyc4NI+FiIiEo3BMLMoF59zzzrk051xaSkpKmV+/RrUabMvcRm5ebplfW0Qk3EycOJEqVaqwdevWvfb//vvvmBlTp07lk08+4ZRTTiE1NZXExEQ6d+7M559/HvBYvvrqKzp16kTVqlWpXbs2V199NRkZGYXHc3JyuOmmm2jYsCExMTHUrVuXc845h+zsbAC2bt3KpZdeSt26dalatSoNGzbksssuC3icwRKOiUU6EF/MUM9kYJdzLtuvXHHzWSf7jgW6rrASGRFJjbgabMrYFOpQRERC7uyzz8bMeO+99/baP2nSJGrXrs2JJ57IsmXLOPPMM/m///s/3n33Xbp27cppp53Gd999F7A4fv/9d3r16kWtWrV49913GTNmDK+//vpe/TDuv/9+XnvtNe6++26++OILHnvsMZKSksjL8xrXhw8fzvTp03n00Uf57LPPuO+++zCzgMUYbOG4VshCIBJojjcktUDRfhALKdL/wcwaAHF+5QJZV9ipnVibDTs2UCepzoELi4hUYNWrV6dXr15MmjSJSy65pHD/pEmT6NevH5GRkVxzzZ7BgPn5+Zx44on8/vvvvPTSS/zjH/8ISBx33303jRo14sMPPyxcIr1GjRoMHDiQH374gS5dujBjxgzOP/98Lr744sLzBgwYUPjzjBkzGDZsGAMHDizcd+GFFwYkvrIQjonF98B2vGGh9wCYWRzeHBTP+5WbAtxsZgnOuR2+fQOBTOCbINQVdlITUzX7pogEjV0Wur+S3Quu1OcMHDiQiy++mM2bN1OzZk3mzp3L4sWLefHFFwFYvXo1d9xxB1OnTmXdunU4510jUEkFeElBQSJT4NxzzyUqKorp06fTpUsX2rdvzzPPPEPt2rXp1asX7dq126tFon379owfP57IyEh69OhBy5YtAxZfWSjzxML3xd7b97YekGhmBW1EnzrndpnZA8AoM0vHazEYjvfY5km/qp4FrgMmm9k4oCkwGnikYNioc253oOoKR1ovRESC6WC+3EOpT58+REdH8+6773L55ZczadIk6tevz3HHHUd+fj59+vRhx44djB07lubNm1OtWjXuvPNONmwI3L+j69ato3bt2nvti4yMpGbNmmzZsgWAkSNHEhERwdNPP80tt9xCvXr1uPnmm7n++usBmDBhAnfeeSdjx45l2LBhNG/enLvvvptBgwYFLM5gCkUfi1Tgbd/WGWjr9z7VV+YB4F7gNuBjvLkoTnHOFf557pxLB07Ge9TxEd6EVo8CdxW5XiDrCisacioiskd8fDynn346kyZNAuCtt96if//+mBl//vknc+bM4cknn+Sf//wn3bp1Iy0tjczMzIDGcNhhh/0tUcnLy2Pz5s3UqFEDgKpVqzJ27FiWL1/O4sWLGThwIDfccAP//e9/Ae+xzhNPPMFff/3FvHnz6NSpExdccAHz588PaKzBEooJspY752wf23JfGeecu9c5V985F+ucO945N6eYuuY7507ylTnMOTeq6NDSQNYVbpRYiIjsbdCgQXzzzTd89NFHLF26tPCv/IIEIiYmprDsihUrAtpxE6BTp0689957hR0xASZPnkxubi7HHXfc38q3aNGChx56iJiYmGIThyOPPJLx48eTn5/PwoVh2+VvL+HYx0JKKDUxlSVLloQ6DBGRsNG7d2/i4uK44ooraNKkCcceeywArVu3pn79+tx4443cfffd7Nixg7vuuot69eoF9PojR47k6KOP5uyzz+aqq65i9erV3HLLLfTs2ZMuXboAcM4559CxY0eOPvpoYmNjeeedd8jNzeWEE04A4LjjjuOcc87hiCOOwMx44YUXqFatWuFnCXfhONxUSkgtFiIie4uNjaVPnz6sW7dur1EVMTExTJ48maioKPr168eoUaO47bbb6NYtsKs2HH744UyZMoUNGzbQt29fRo4cyXnnncc777xTWKZr1668//77nH/++Zx11lnMmjWLd999l7S0NAC6dOnCxIkT6devHwMGDGDTpk1MmTKF+vXrBzTWYLGCXrFy8NLS0tzMmTPL/Lo/LvmR6yddz0+3/1Tm1xaRimPBggW0adMm1GFIGTuU/+5mNss5l1bcMbVYlGNa4VRERMKN+liUY3oUIiISPHl5eeyvVT8qSl+hxVGLRTkWXzUegJ1ZO0MciYhIxXPyyScTHR29z02Kp3SrnEtN8GbfbJrSNNShiIhUKM899xw7duw4cEHZixKLcq6gn4USCxGRwGrVqlWoQyiX9CiknFM/CxERCSdKLMo5JRYiEgiaeqByCeZ/byUW5ZyGnIrIoYqOjg74mhkS3jIzM4PWAVWJRTmnFgsROVSpqamsWbOGXbt2qeWignPOsWvXLtasWUNqauqBTzgI6rxZzqUmpPLz8p9DHYaIlGOJiYkArF27lpycnBBHI8EWHR1N7dq1C/+7B5oSi3IuNVEtFiJy6BITE4P2RSOVix6FlHOpCepjISIi4UOJRTlXO7G2WixERCRsKLEo52rF12Lzzs3k5eeFOhQRERElFuVdVGQUSbFJbNm5JdShiIiIKLGoCNTPQkREwoUSiwpAc1mIiEi4UGJRASixEBGRcKHEogLQtN4iIhIulFhUAGqx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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the training loss\n",
    "\n",
    "model.plot_loss(start_epoch=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluation loss is:\n",
      "        pe_loss:       1.5027e+00\n",
      "     force_loss:       3.3879e+01\n",
      "    stress_loss:       2.5975e+02\n",
      "     total_loss:       6.1357e+01\n",
      "The total loss is computed using the loss weights - pe: 1.00 - force: 1.00 - stress: 0.10\n"
     ]
    }
   ],
   "source": [
    "# Evaluate using the first 5 data in test dataset\n",
    "\n",
    "model.evaluate(test_dataset.take(5),return_prediction=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'pe': array([-24.43516537, -27.25794917, -26.44558567, -29.71721262,\n",
       "        -26.18328476]),\n",
       " 'force': array([[[-14.98369464,  60.16402837, -11.24057251],\n",
       "         [ 27.58750673, -46.4019775 ,  11.68806955],\n",
       "         [ 50.03849536,  47.02174987, -46.65503074],\n",
       "         [-62.64230727, -60.78380053,  46.2075337 ]],\n",
       " \n",
       "        [[ 66.39126588,  -0.918724  ,  31.74912699],\n",
       "         [  2.26208116,  17.5541579 , -31.09016267],\n",
       "         [-42.02774142,  45.56440882, -12.25110425],\n",
       "         [-26.62560584, -62.19984267,  11.59213992]],\n",
       " \n",
       "        [[-70.52058765,  80.59492525, -15.88633072],\n",
       "         [ 95.63537577, -90.82699739,  12.29866236],\n",
       "         [ 40.98061171, -82.91953395,  15.95529539],\n",
       "         [-66.09539983,  93.15160611, -12.36762705]],\n",
       " \n",
       "        [[ 35.92992587, -28.45139903,  43.08669821],\n",
       "         [-42.52183304,  13.74105695, -30.8883209 ],\n",
       "         [ 28.8808097 ,  16.15299698,  12.92609446],\n",
       "         [-22.28890239,  -1.4426549 , -25.12447177]],\n",
       " \n",
       "        [[ 10.62635586, -23.71130926,   3.13159382],\n",
       "         [-24.0703802 ,  40.75223825,   3.90257854],\n",
       "         [ -6.31185408, -37.11107881,  26.76910415],\n",
       "         [ 19.75587847,  20.07014987, -33.80327653]]]),\n",
       " 'stress': array([[-4.74467792e+02,  4.50541291e+01,  7.48435275e-01,\n",
       "          4.50541293e+01, -4.45066829e+02, -1.39581531e+00,\n",
       "          7.48433858e-01, -1.39581685e+00,  8.08017409e-01],\n",
       "        [ 1.46181081e+03,  3.81848270e+01, -3.52670752e+00,\n",
       "          3.81848270e+01,  1.34280176e+03,  4.23490518e+00,\n",
       "         -3.52670589e+00,  4.23490481e+00, -1.47902890e+00],\n",
       "        [-1.00130692e+03, -1.73574190e+01,  3.24464109e+00,\n",
       "         -1.73574189e+01, -1.03593198e+03, -3.93371377e+00,\n",
       "          3.24464110e+00, -3.93371389e+00,  5.60459398e-01],\n",
       "        [-6.92777205e+02, -3.50395507e+01,  3.72795564e-01,\n",
       "         -3.50395507e+01, -6.08529653e+02, -4.44634887e-01,\n",
       "          3.72794506e-01, -4.44634859e-01,  6.23967448e-01],\n",
       "        [ 9.13840620e+01, -5.63079683e+01, -4.92513182e-01,\n",
       "         -5.63079682e+01,  4.23616309e+02,  9.50404198e-01,\n",
       "         -4.92513625e-01,  9.50403883e-01, -5.03840202e-02]])}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# prediction using the first 5 data in test dataset\n",
    "\n",
    "input_dict = get_input_dict(test_dataset.take(5))\n",
    "model.predict(input_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save/load model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**save the trained model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: example.tfdnn/assets\n",
      "Network signatures and descriptor are written to example.tfdnn/parameters for LAMMPS simulation.\n"
     ]
    }
   ],
   "source": [
    "# we re-write the descriptor here to empasize that it should be the same one defined above\n",
    "descriptor = {'name': 'acsf', \n",
    "              'cutoff': 6.5,\n",
    "              'etaG2':[0.01,0.05,0.1,0.5,1,5,10], \n",
    "              'etaG4': [0.01], \n",
    "              'zeta': [0.08,0.2,1.0,5.0,10.0,50.0,100.0],\n",
    "              'lambda': [1.0, -1.0]}\n",
    "\n",
    "save_dir = 'example.tfdnn'\n",
    "network.save(model,save_dir,descriptor=descriptor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Load the trained model for continuous training and prediction**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Network has been inflated! self.built: True\n",
      "Forces are used for training.\n",
      "Stresses are used for training.\n",
      "Scaling factors are computed using training dataset.\n",
      "Training dataset are standardized.\n",
      "Validation dataset are standardized.\n",
      "Training dataset will be shuffled during training.\n",
      "\n",
      "===> Epoch 1/5 - 0.209s/epoch\n",
      "     training_loss    - pe_loss: 3.176 - force_loss: 25.337 - stress_loss: 287.488 - total_loss: 57.262\n",
      "     validation_loss  - pe_loss: 4.905 - force_loss: 25.092 - stress_loss: 710.237 - total_loss: 101.021\n",
      "\n",
      "===> Epoch 2/5 - 0.182s/epoch\n",
      "     training_loss    - pe_loss: 4.932 - force_loss: 24.058 - stress_loss: 421.647 - total_loss: 71.155\n",
      "     validation_loss  - pe_loss: 5.630 - force_loss: 22.020 - stress_loss: 581.018 - total_loss: 85.751\n",
      "\n",
      "===> Epoch 3/5 - 0.214s/epoch\n",
      "     training_loss    - pe_loss: 5.663 - force_loss: 20.711 - stress_loss: 462.624 - total_loss: 72.636\n",
      "     validation_loss  - pe_loss: 7.609 - force_loss: 21.834 - stress_loss: 472.273 - total_loss: 76.671\n",
      "\n",
      "===> Epoch 4/5 - 0.204s/epoch\n",
      "     training_loss    - pe_loss: 7.579 - force_loss: 18.940 - stress_loss: 349.679 - total_loss: 61.486\n",
      "     validation_loss  - pe_loss: 9.569 - force_loss: 19.086 - stress_loss: 308.439 - total_loss: 59.499\n",
      "\n",
      "===> Epoch 5/5 - 0.196s/epoch\n",
      "     training_loss    - pe_loss: 8.719 - force_loss: 20.088 - stress_loss: 184.540 - total_loss: 47.261\n",
      "     validation_loss  - pe_loss: 9.957 - force_loss: 19.737 - stress_loss: 293.991 - total_loss: 59.094\n",
      "\n",
      "End of training, elapsed time:  00:00:01\n"
     ]
    }
   ],
   "source": [
    "imported_model = network.load(save_dir)\n",
    "\n",
    "# Re-train the model \n",
    "loss_weights = {'pe' : 1, 'force' : 1, 'stress': 0.1}\n",
    "\n",
    "opt = 'Adam'\n",
    "loss_fun = 'rmse'\n",
    "scaling = 'std'\n",
    "\n",
    "model.train(train_dataset, val_dataset, \\\n",
    "            optimizer=opt, \\\n",
    "            loss_fun = loss_fun, \\\n",
    "            batch_size=30, \\\n",
    "            lr=0.02, \\\n",
    "            epochs=5, \\\n",
    "            scaling=scaling, \\\n",
    "            loss_weights=loss_weights, \\\n",
    "            compute_all_loss=True, \\\n",
    "            shuffle=True, \\\n",
    "            append_loss=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluation loss is:\n",
      "        pe_loss:       1.5027e+00\n",
      "     force_loss:       3.3879e+01\n",
      "    stress_loss:       2.5975e+02\n",
      "     total_loss:       6.1357e+01\n",
      "The total loss is computed using the loss weights - pe: 1.00 - force: 1.00 - stress: 0.10\n"
     ]
    }
   ],
   "source": [
    "imported_model.evaluate(test_dataset.take(5),return_prediction=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'pe': array([-24.43516537, -27.25794917, -26.44558567, -29.71721262,\n",
       "        -26.18328476]),\n",
       " 'force': array([[[-14.98369464,  60.16402837, -11.24057251],\n",
       "         [ 27.58750673, -46.4019775 ,  11.68806955],\n",
       "         [ 50.03849536,  47.02174987, -46.65503074],\n",
       "         [-62.64230727, -60.78380053,  46.2075337 ]],\n",
       " \n",
       "        [[ 66.39126588,  -0.918724  ,  31.74912699],\n",
       "         [  2.26208116,  17.5541579 , -31.09016267],\n",
       "         [-42.02774142,  45.56440882, -12.25110425],\n",
       "         [-26.62560584, -62.19984267,  11.59213992]],\n",
       " \n",
       "        [[-70.52058765,  80.59492525, -15.88633072],\n",
       "         [ 95.63537577, -90.82699739,  12.29866236],\n",
       "         [ 40.98061171, -82.91953395,  15.95529539],\n",
       "         [-66.09539983,  93.15160611, -12.36762705]],\n",
       " \n",
       "        [[ 35.92992587, -28.45139903,  43.08669821],\n",
       "         [-42.52183304,  13.74105695, -30.8883209 ],\n",
       "         [ 28.8808097 ,  16.15299698,  12.92609446],\n",
       "         [-22.28890239,  -1.4426549 , -25.12447177]],\n",
       " \n",
       "        [[ 10.62635586, -23.71130926,   3.13159382],\n",
       "         [-24.0703802 ,  40.75223825,   3.90257854],\n",
       "         [ -6.31185408, -37.11107881,  26.76910415],\n",
       "         [ 19.75587847,  20.07014987, -33.80327653]]]),\n",
       " 'stress': array([[-4.74467792e+02,  4.50541291e+01,  7.48435275e-01,\n",
       "          4.50541293e+01, -4.45066829e+02, -1.39581531e+00,\n",
       "          7.48433858e-01, -1.39581685e+00,  8.08017409e-01],\n",
       "        [ 1.46181081e+03,  3.81848270e+01, -3.52670752e+00,\n",
       "          3.81848270e+01,  1.34280176e+03,  4.23490518e+00,\n",
       "         -3.52670589e+00,  4.23490481e+00, -1.47902890e+00],\n",
       "        [-1.00130692e+03, -1.73574190e+01,  3.24464109e+00,\n",
       "         -1.73574189e+01, -1.03593198e+03, -3.93371377e+00,\n",
       "          3.24464110e+00, -3.93371389e+00,  5.60459398e-01],\n",
       "        [-6.92777205e+02, -3.50395507e+01,  3.72795564e-01,\n",
       "         -3.50395507e+01, -6.08529653e+02, -4.44634887e-01,\n",
       "          3.72794506e-01, -4.44634859e-01,  6.23967448e-01],\n",
       "        [ 9.13840620e+01, -5.63079683e+01, -4.92513182e-01,\n",
       "         -5.63079682e+01,  4.23616309e+02,  9.50404198e-01,\n",
       "         -4.92513625e-01,  9.50403883e-01, -5.03840202e-02]])}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_dict = get_input_dict(test_dataset.take(5))\n",
    "imported_model.predict(input_dict)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
